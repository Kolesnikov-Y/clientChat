[{"C:\\Users\\Anuitex-12\\Desktop\\proj\\bench\\saga\\my-app\\src\\index.tsx":"1","C:\\Users\\Anuitex-12\\Desktop\\proj\\bench\\saga\\my-app\\src\\reportWebVitals.ts":"2","C:\\Users\\Anuitex-12\\Desktop\\proj\\bench\\saga\\my-app\\src\\App.tsx":"3","C:\\Users\\Anuitex-12\\Desktop\\proj\\bench\\saga\\my-app\\src\\pages\\ChatPage.tsx":"4","C:\\Users\\Anuitex-12\\Desktop\\proj\\bench\\saga\\my-app\\src\\app-state.ts":"5","C:\\Users\\Anuitex-12\\Desktop\\proj\\bench\\saga\\my-app\\src\\redux\\users\\store\\actions.ts":"6","C:\\Users\\Anuitex-12\\Desktop\\proj\\bench\\saga\\my-app\\src\\redux\\users\\store\\reducers.ts":"7","C:\\Users\\Anuitex-12\\Desktop\\proj\\bench\\saga\\my-app\\src\\pages\\ChatContainer.tsx":"8","C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\index.tsx":"9","C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\reportWebVitals.ts":"10","C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\app-state.ts":"11","C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\App.tsx":"12","C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\redux\\users\\store\\reducers.ts":"13","C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\redux\\users\\store\\actions.ts":"14","C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\pages\\user\\UserContainer.tsx":"15","C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\pages\\user\\UserComponent.tsx":"16","C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\redux\\chats\\store\\actions.ts":"17","C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\redux\\chats\\saga\\index.ts":"18","C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\redux\\chats\\store\\reducers.ts":"19","C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\redux\\chats\\saga\\chatsHandler.ts":"20","C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\redux\\users\\saga\\index.ts":"21","C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\redux\\users\\saga\\userHandler.ts":"22","C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\pages\\chat\\ChatContainer.tsx":"23","C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\pages\\chat\\ChatPage.tsx":"24","C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\pages\\chat\\Ð¡hatForm.tsx":"25","C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\pages\\auth\\test\\LoginTestContainer.tsx":"26","C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\pages\\auth\\test\\FormTest.tsx":"27"},{"size":476,"mtime":1611675633605,"results":"28","hashOfConfig":"29"},{"size":425,"mtime":1610984153080,"results":"30","hashOfConfig":"29"},{"size":2916,"mtime":1611836797589,"results":"31","hashOfConfig":"29"},{"size":1751,"mtime":1611926289427,"results":"32","hashOfConfig":"29"},{"size":651,"mtime":1611929714034,"results":"33","hashOfConfig":"29"},{"size":198,"mtime":1611675627634,"results":"34","hashOfConfig":"29"},{"size":621,"mtime":1611675797002,"results":"35","hashOfConfig":"29"},{"size":1145,"mtime":1611926642136,"results":"36","hashOfConfig":"29"},{"size":477,"mtime":1613132699629,"results":"37","hashOfConfig":"38"},{"size":425,"mtime":1610984153080,"results":"39","hashOfConfig":"38"},{"size":1159,"mtime":1612266059961,"results":"40","hashOfConfig":"38"},{"size":603,"mtime":1613132508218,"results":"41","hashOfConfig":"38"},{"size":1636,"mtime":1612865892257,"results":"42","hashOfConfig":"38"},{"size":318,"mtime":1612536620700,"results":"43","hashOfConfig":"38"},{"size":3864,"mtime":1613058420858,"results":"44","hashOfConfig":"38"},{"size":4114,"mtime":1613058419592,"results":"45","hashOfConfig":"38"},{"size":858,"mtime":1613131608872,"results":"46","hashOfConfig":"38"},{"size":311,"mtime":1613053147159,"results":"47","hashOfConfig":"38"},{"size":2536,"mtime":1613054239082,"results":"48","hashOfConfig":"38"},{"size":8028,"mtime":1613053644971,"results":"49","hashOfConfig":"38"},{"size":201,"mtime":1612884288733,"results":"50","hashOfConfig":"38"},{"size":3530,"mtime":1612884297810,"results":"51","hashOfConfig":"38"},{"size":3243,"mtime":1613131604115,"results":"52","hashOfConfig":"38"},{"size":2897,"mtime":1613131615403,"results":"53","hashOfConfig":"38"},{"size":1204,"mtime":1612778708855,"results":"54","hashOfConfig":"38"},{"size":1896,"mtime":1613147289541,"results":"55","hashOfConfig":"38"},{"size":1468,"mtime":1613147314946,"results":"56","hashOfConfig":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"ogu1bc",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mlq20n",{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"78"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"78"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Anuitex-12\\Desktop\\proj\\bench\\saga\\my-app\\src\\index.tsx",[],["118","119"],"C:\\Users\\Anuitex-12\\Desktop\\proj\\bench\\saga\\my-app\\src\\reportWebVitals.ts",[],"C:\\Users\\Anuitex-12\\Desktop\\proj\\bench\\saga\\my-app\\src\\App.tsx",[],"C:\\Users\\Anuitex-12\\Desktop\\proj\\bench\\saga\\my-app\\src\\pages\\ChatPage.tsx",[],"C:\\Users\\Anuitex-12\\Desktop\\proj\\bench\\saga\\my-app\\src\\app-state.ts",[],"C:\\Users\\Anuitex-12\\Desktop\\proj\\bench\\saga\\my-app\\src\\redux\\users\\store\\actions.ts",[],"C:\\Users\\Anuitex-12\\Desktop\\proj\\bench\\saga\\my-app\\src\\redux\\users\\store\\reducers.ts",[],"C:\\Users\\Anuitex-12\\Desktop\\proj\\bench\\saga\\my-app\\src\\pages\\ChatContainer.tsx",["120","121","122"],"C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\index.tsx",[],"C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\reportWebVitals.ts",[],["123","124"],"C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\app-state.ts",[],"C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\App.tsx",["125"],"import React from 'react';\nimport LoginTestContainer from './pages/auth/test/LoginTestContainer';\nimport './pages/style/style.css'\nimport UserContainer from './pages/user/UserContainer';\nimport './index.scss'\n\n\nfunction App(): JSX.Element {\n\n    // const a = `14413628235-o9h09ul5k9m9715udfnrms3i1b1pb28d.apps.googleusercontent.com`\n\n  return (\n    <div className=\"App\">\n      <LoginTestContainer/>\n\n        {/* <header className='header'>\n          HEADER\n        </header>\n      <div className=\"container\">\n          <UserContainer/>\n      </div> */}\n\n       \n      </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\redux\\users\\store\\reducers.ts",[],"C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\redux\\users\\store\\actions.ts",[],"C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\pages\\user\\UserContainer.tsx",["126"],"import React from 'react';\r\nimport './style/userStyle.css'\r\nimport { AppState } from '../../app-state';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { createNewChatAction, debounceUserSearchAction, setChatroomAction } from '../../redux/chats/store/actions';\r\nimport { addUsersChatAction, getUserInfoAction } from '../../redux/users/store/actions';\r\nimport UserComponent from './UserComponent';\r\nimport  { MessageModel } from '../chat/ChatContainer';\r\nimport { ChatTitleModel } from '../../model';\r\n\r\nexport  interface UserDataModel {\r\n    name: string; \r\n    email: string; \r\n    gender: string; \r\n    id: string; \r\n    phone: string; \r\n    chats: UserChatModel[]; \r\n    contacts: UserContactsModel[];\r\n    age: number;\r\n} \r\n\r\nexport interface UserChatModel {\r\n    chatId: string; \r\n    chatTitle : ChatTitleModel[]; \r\n    messages: MessageModel[]\r\n}\r\n\r\nexport interface UserContactsModel {\r\n    name: string; \r\n    phone: string; \r\n    id: string; \r\n    gender: string; \r\n    age: string; \r\n}\r\n\r\n function UserContainer (): JSX.Element {\r\n    const [mockID, setMockID] = React.useState<string>('');\r\n    const [isChatOpen, setChatOpen] = React.useState<boolean>(false);\r\n\r\n    const userFromSearch = useSelector<AppState, UserDataModel[]>(({chats}) => chats.users);\r\n    const chatStatus = useSelector<AppState, string>(({chats} )=> chats.status)\r\n\r\n    const dispatch = useDispatch(); \r\n\r\n    const getUsers = React.useCallback((searchValue: string) => {\r\n        dispatch(debounceUserSearchAction({name: searchValue}))\r\n    }, [dispatch]); \r\n\r\n\r\n\r\n    const isChatCreated = (chat : UserChatModel[], contactId: string ) => {\r\n        return chat.find((chat) => {\r\n            return chat.chatTitle.find((user) => {\r\n                return user.userId === contactId\r\n            })\r\n        }); \r\n    }\r\n\r\n    const getCurrentChat = (id: string): void => {\r\n        dispatch(setChatroomAction({id}));\r\n        if(chatStatus !== \"error\"){\r\n            setChatOpen(true);\r\n        } \r\n    }; \r\n\r\n    const createAndGetNeedChat = (contactName: {name: string, id: string}, user: UserDataModel) => {\r\n        console.log(\"contact\", contactName);\r\n        console.log(\"user\", user);        \r\n        \r\n        const newChat =  {\r\n            chatId: ``,\r\n            chatTitle: [{userName: user.name , userId: user.id}, {userName: contactName.name, userId: contactName.id}],\r\n            messages: []\r\n        }\r\n        dispatch(createNewChatAction(newChat));\r\n        // if(chatStatus === \"success\") setChatOpen(true);\r\n    }\r\n\r\n    const openChatWithUser = (contactName: {name: string, id: string}, user: UserDataModel ): void => {\r\n         \r\n        const getChat = isChatCreated(user.chats, contactName.id);\r\n    \r\n        if(getChat) {\r\n            console.log(\"chat is here\", getChat.chatId)\r\n            getCurrentChat(getChat.chatId); \r\n        }\r\n        else {\r\n            createAndGetNeedChat(contactName, user)\r\n        }\r\n    }\r\n\r\n    const changeUsersIDHelper = (e: any) => {\r\n        setMockID(e.currentTarget.value)\r\n    }\r\n\r\n    const submitHelper = (e: any) => {\r\n        e.preventDefault(); \r\n        dispatch(getUserInfoAction(\r\n            {id: mockID}\r\n        ))\r\n    }\r\n\r\n    return (\r\n        <div className=\"userContainer\">\r\n            <form action=\"\" onSubmit={submitHelper}>\r\n                <input type=\"text\" placeholder=\"User ID\" value={mockID} onChange={changeUsersIDHelper}/>\r\n            </form>\r\n\r\n          <UserComponent userFromSearch={userFromSearch} \r\n                getUsers={getUsers} \r\n                isChatOpen={isChatOpen} \r\n                getCurrentChat={getCurrentChat} \r\n                openChatWithUser={openChatWithUser}\r\n                createAndGetNeedChat={createAndGetNeedChat}\r\n                />\r\n                \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo( UserContainer );",["127","128"],"C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\pages\\user\\UserComponent.tsx",[],"C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\redux\\chats\\store\\actions.ts",[],"C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\redux\\chats\\saga\\index.ts",[],"C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\redux\\chats\\store\\reducers.ts",["129"],"import { Action } from \"redux\"; \r\nimport { UserChatModel, UserDataModel } from \"../../../pages/user/UserContainer\";\r\nimport { UserStateModel } from \"../../users/store/reducers\";\r\nimport { completedCreateNewChatroomAction, completedDeleteMessageAction, completedEditMessageAction, completedGetNeedChatAction, completedGetUserByName, failServerAccessAction, startOfServerAccessAction } from \"../saga/chatsHandler\";\r\nimport { deleteMessageAction } from \"./actions\";\r\n\r\nexport interface ChatUserModel {\r\n    user: UserStateModel; \r\n    massage: string; \r\n    messageDate: Date\r\n}\r\n\r\nexport interface InitialChatModel {\r\n    status: \"initial\" | \"success\" | 'error' | \"running\";\r\n    users: UserDataModel[]; \r\n    currentChat: UserChatModel; \r\n    errorMsg?: string; \r\n}\r\n\r\n\r\nconst initialState: InitialChatModel = {\r\n    status: 'initial',\r\n    currentChat: {\r\n        chatId: '', \r\n        chatTitle: [], \r\n        messages: []\r\n    },\r\n    users: [], \r\n}\r\n\r\nexport function UserChatReducer (state: InitialChatModel = initialState, action: Action) {\r\n\r\n    if(startOfServerAccessAction.is(action)){\r\n        return {\r\n            ...state, \r\n            status: action.status, \r\n        }\r\n    }\r\n\r\n    if(completedGetUserByName.is(action)){\r\n        return {\r\n            ...state,\r\n            status: action.status, \r\n            users: [...action.users]\r\n        }\r\n    }\r\n\r\n    if(failServerAccessAction.is(action)){\r\n        return {\r\n            ...state, \r\n            status: action.status, \r\n            errorMsg: action.errorMsg\r\n        }\r\n    }\r\n\r\n    if(completedCreateNewChatroomAction.is(action)){\r\n        return {\r\n            ...state, \r\n            status: action.status, \r\n            currentChat: action.currentChat\r\n        }\r\n    }\r\n\r\n    if(completedGetNeedChatAction.is(action)){\r\n        return state = {\r\n            ...state, \r\n            status: action.status,\r\n            currentChat: action.currentChat\r\n        }   \r\n    }\r\n\r\n    if(completedDeleteMessageAction.is(action)){\r\n        return {...state, \r\n            status: action.status\r\n        }\r\n    }\r\n    if(completedEditMessageAction.is(action)){\r\n        return {...state, \r\n            status: action.status\r\n        }\r\n    }\r\n\r\n    if(action.type === 'CHATROOM_CONNECTED'){\r\n        return {\r\n            ...state, \r\n            isChatConnected: true\r\n        }\r\n    }\r\n    \r\n    if(action.type === 'CHATROOM_DISCONNECTED'){\r\n        return {\r\n            ...state, \r\n            isChatConnected: false \r\n        }\r\n    }\r\n\r\n    return state\r\n} ","C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\redux\\chats\\saga\\chatsHandler.ts",[],"C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\redux\\users\\saga\\index.ts",[],"C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\redux\\users\\saga\\userHandler.ts",["130"],"import { defineAction } from \"rd-redux-utils\";\r\nimport { UserStateModel } from \"../store/reducers\";\r\nimport { put, takeEvery } from \"redux-saga/effects\";\r\nimport { addUsersChatAction, getUserInfoAction } from \"../store/actions\";\r\nimport axios, { AxiosResponse } from \"axios\";\r\nimport { RequestGetUserByIdModel, ResponseGetUserModel , ResponseChangeUserDataModel, RequestAddUsersChatModel} from \"../../../model\";\r\nimport { RequestChangeUserDataModel } from \"../../../model/request/requestChangeUserData.model\";\r\n\r\nexport const userStartOfServerAccessAction = defineAction<UserStateModel>(\"USER/START_OF_SERVER_ACCESS\");\r\nexport const completedGetUserAction = defineAction<UserStateModel>(\"USER/GET_USER\"); \r\nexport const userFailedAccessAction = defineAction<UserStateModel>(\"USER/FAILED_ACCESS\");\r\nexport const completedChangeUserDataAction = defineAction<UserStateModel>(\"USER/COMPLETED_ADD_TO_USER_CHATS\");\r\n\r\nconst mockUserInfo = {\r\n    name: '', \r\n    email: '', \r\n    id: '', \r\n    chats: [], \r\n    age: 0, \r\n    gender: 'male', \r\n    phone: '',\r\n    contacts: [],\r\n}\r\n\r\nexport function* addChatToUsersSaga () {\r\n    yield takeEvery(addUsersChatAction.TYPE, function* (\r\n        action: typeof addUsersChatAction.typeOf.action\r\n    ){\r\n        let addData: RequestAddUsersChatModel = action;\r\n\r\n        try {\r\n            yield put(\r\n                userStartOfServerAccessAction({\r\n                    status: 'running', \r\n                    userInfo: mockUserInfo\r\n                })\r\n            )\r\n\r\n            const response: AxiosResponse<ResponseChangeUserDataModel> = yield axios.patch(\r\n                `http://localhost:3001/api/user/addChatToUsers`, addData\r\n             );\r\n\r\n             if(response.status === 200) {\r\n                 yield put(\r\n                    completedChangeUserDataAction({\r\n                        status: 'success',\r\n                        payload: response.data, \r\n                        userInfo: mockUserInfo\r\n                    }\r\n                        )\r\n                 )\r\n             }\r\n            \r\n        } catch (error) {\r\n                  yield put(\r\n                userFailedAccessAction({\r\n                    status: 'error', \r\n                    errorMsg:  error.toString(), \r\n                    userInfo: mockUserInfo\r\n                })\r\n            )\r\n        }\r\n    })\r\n}\r\n\r\nexport function* getUserSaga() {\r\n    yield takeEvery(getUserInfoAction.TYPE, function* (\r\n        action: typeof getUserInfoAction.typeOf.action\r\n    ) {\r\n        try {\r\n            const actionModel: RequestGetUserByIdModel = action\r\n\r\n            yield put(\r\n                userStartOfServerAccessAction({\r\n                    status: 'running', \r\n                    userInfo: mockUserInfo\r\n                })\r\n            ); \r\n\r\n            const response: AxiosResponse<ResponseGetUserModel[]> = yield axios.get(\r\n               ` http://localhost:3001/api/user/${actionModel.id}`\r\n            );\r\n            \r\n            if(response.status === 200) {\r\n                yield put(\r\n                    completedGetUserAction({\r\n                        userInfo: response.data[0],\r\n                        status: 'success'\r\n                    })\r\n                )\r\n            }\r\n\r\n        } catch (error) {\r\n            yield put(\r\n                userFailedAccessAction({\r\n                    status: 'error', \r\n                    errorMsg:  error.toString(), \r\n                    userInfo: mockUserInfo\r\n                })\r\n            )\r\n        }\r\n    })\r\n}","C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\pages\\chat\\ChatContainer.tsx",["131","132","133","134"],"C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\pages\\chat\\ChatPage.tsx",["135","136","137"],"C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\pages\\chat\\Ð¡hatForm.tsx",[],"C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\pages\\auth\\test\\LoginTestContainer.tsx",[],"C:\\Users\\Anuitex-12\\Desktop\\proj\\clientChat\\src\\pages\\auth\\test\\FormTest.tsx",[],{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":15,"column":12,"nodeType":"144","messageId":"145","endLine":15,"endColumn":19},{"ruleId":"142","severity":1,"message":"146","line":15,"column":21,"nodeType":"144","messageId":"145","endLine":15,"endColumn":31},{"ruleId":"147","severity":1,"message":"148","line":22,"column":7,"nodeType":"149","endLine":22,"endColumn":9,"suggestions":"150"},{"ruleId":"138","replacedBy":"151"},{"ruleId":"140","replacedBy":"152"},{"ruleId":"142","severity":1,"message":"153","line":4,"column":8,"nodeType":"144","messageId":"145","endLine":4,"endColumn":21},{"ruleId":"142","severity":1,"message":"154","line":6,"column":10,"nodeType":"144","messageId":"145","endLine":6,"endColumn":28},{"ruleId":"138","replacedBy":"155"},{"ruleId":"140","replacedBy":"156"},{"ruleId":"142","severity":1,"message":"157","line":5,"column":10,"nodeType":"144","messageId":"145","endLine":5,"endColumn":29},{"ruleId":"142","severity":1,"message":"158","line":7,"column":10,"nodeType":"144","messageId":"145","endLine":7,"endColumn":36},{"ruleId":"142","severity":1,"message":"157","line":7,"column":10,"nodeType":"144","messageId":"145","endLine":7,"endColumn":29},{"ruleId":"142","severity":1,"message":"146","line":33,"column":21,"nodeType":"144","messageId":"145","endLine":33,"endColumn":31},{"ruleId":"147","severity":1,"message":"159","line":59,"column":8,"nodeType":"149","endLine":59,"endColumn":10,"suggestions":"160"},{"ruleId":"147","severity":1,"message":"161","line":89,"column":8,"nodeType":"149","endLine":89,"endColumn":18,"suggestions":"162"},{"ruleId":"142","severity":1,"message":"163","line":5,"column":10,"nodeType":"144","messageId":"145","endLine":5,"endColumn":14},{"ruleId":"142","severity":1,"message":"164","line":5,"column":16,"nodeType":"144","messageId":"145","endLine":5,"endColumn":24},{"ruleId":"142","severity":1,"message":"165","line":6,"column":24,"nodeType":"144","messageId":"145","endLine":6,"endColumn":34},"no-native-reassign",["166"],"no-negated-in-lhs",["167"],"@typescript-eslint/no-unused-vars","'message' is assigned a value but never used.","Identifier","unusedVar","'setMessage' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'chat'. Either include it or remove the dependency array. You can also do a functional update 'setChat(c => ...)' if you only need 'chat' in the 'setChat' call.","ArrayExpression",["168"],["166"],["167"],"'UserContainer' is defined but never used.","'addUsersChatAction' is defined but never used.",["166"],["167"],"'deleteMessageAction' is defined but never used.","'RequestChangeUserDataModel' is defined but never used.","React Hook React.useEffect has missing dependencies: 'chatInfo.chatId' and 'chatInfo.messages'. Either include them or remove the dependency array. If 'setChat' needs the current value of 'chatInfo.messages', you can also switch to useReducer instead of useState and read 'chatInfo.messages' in the reducer.",["169"],"React Hook React.useCallback has an unnecessary dependency: 'dispatch'. Either exclude it or remove the dependency array.",["170"],"'Menu' is defined but never used.","'Dropdown' is defined but never used.","'UpOutlined' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},"Update the dependencies array to be: [chat]",{"range":"177","text":"178"},"Update the dependencies array to be: [chatInfo.chatId, chatInfo.messages]",{"range":"179","text":"180"},"Update the dependencies array to be: []",{"range":"181","text":"182"},[714,716],"[chat]",[1761,1763],"[chatInfo.chatId, chatInfo.messages]",[2893,2903],"[]"]